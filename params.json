{"name":"OpenDcd","tagline":"An Open Source WFST based Speech Recognition Decoder","body":"OpenDcd - An Open Source WFST based Speech Recognition Decoder\r\n=================\r\n\r\nOpenDcd a lightweight and portable WFST based speech decoding toolkit written in C++. OpenDcd provides a set of tools for decoding, cascade construction and hypothesis post- processing. The focus of the toolkit is to provide a foundation for research into new decoding methods that can be deployed. Through the use of C++ templates the core decoder can be configured and extended in many ways. For example selecting different on-the-fly composition or lattice generation strategies. The core engine has detailed profiling, logging and analysis methods that make it highly for deployement in production systems.\r\n\r\nThe toolkit makes used of [OpenFst](http://openfst.org/) for representing and manipulating the models. The toolkit was developed by members of [Yandex](http://yandex.com/). It is distributed as an open source project with an Apache Licence. For more information see the [main documentation site](https://github.com/opendcd/opendcd.github.io/wiki)\r\n\r\n\r\nQuick Installation Guide\r\n-------------------------\r\n\r\n````bash\r\n    git clone https://github.com/opendcd/opendcd.git\r\n````\r\n\r\n````bash\r\n    cd src/bin\r\n    make\r\n````\r\n\r\nSee egs directory for an example showing how to convert a Kaldi WSJ setup\r\n\r\nBrief Overview\r\n---------------\r\n\r\nThe first release includes the following features:\r\n\r\n  - Standalone lightweight decoder core\r\n  - Kaldi file format compatible\r\n  - Cascade construction and experimental pipeline built around Unix make\r\n  - Post-processing tools\r\n\r\nDecoder:\r\n\r\n  - Customizable transition model for custom user and transition models\r\n  - Direct decoding on different weight semiring\r\n  - On-the-fly decoding using lookahead composition\r\n  - Lattice generation \r\n  - Switchable STL implementations. Use different implementations such EASTL or RDESTL, or mix optimized containers such as Google sparse hash.\r\n\r\nCascde construction:\r\n\r\n  - Experimental framework built around Gnu make\r\n  \r\nResults post-processing:\r\n\r\n  - ``farfilter`` Apply the command to every in FST in the FAR archive\r\n  - ``latticetofar`` Convert Kaldi Table to OpenFst FAR archive\r\n  - ``fartolattice`` Convert an OpenFst FAR archive to Kaldi Table\r\n\r\nKaldi Interoperability:\r\n\r\n  - Write results in Kaldi *Lattice* table format\r\n\r\nMore Information\r\n\r\n  - Ongoing introdcution slides can be found [here](https://dl.dropboxusercontent.com/u/321851/opendcd.pdf). These are updated frequently. \r\n","google":"UA-53767021-1","note":"Don't delete this file! It's used internally to help with page regeneration."}
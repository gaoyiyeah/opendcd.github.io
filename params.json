{"name":"OpenDcd","tagline":"An Open Source WFST based Speech Recognition Decoder","body":"OpenDcd - An Open Source WFST based Speech Recognition Decoder\r\n=================\r\n\r\nOpenDcd a lightweight and portable WFST based speech decoding toolkit written in C++. OpenDcd provides a set of tools for decoding, cascade construction and hypothesis post- processing. The focus of the toolkit is to provide a foundation for research into new decoding methods that can be deployed. Through the use of C++ templates the core decoder can be configured and extended in many ways. For example selecting different on-the-fly composition or lattice generation strategies. The core engine has detailed profiling, logging and analysis methods that make it highly for deployement in production systems. The toolkit makes used of [OpenFst](http://openfst.org/) for representing and manipulating the models. It is distributed as an open source project with an Apache Licence. \r\n\r\nFor more information see the [main documentation site](https://github.com/opendcd/opendcd.github.io/wiki), and the tutorial for installing the OpenDcd and decoding using the Librispeech corpus and models from kaldi-asr.og.\r\n\r\n\r\nQuick Installation Guide\r\n-------------------------\r\n\r\n````bash\r\n    git clone https://github.com/opendcd/opendcd.git\r\n````\r\n\r\n````bash\r\n    cd src/bin\r\n    make\r\n````\r\n\r\nKaldi Conversion Quick Start\r\n-------------------------------\r\n\r\nFor Kaldi model converion and decoding a working Kaldi installation and \r\nset of acoustic and language models and features from generated from a Kaldi egs/s5 \r\nscript are required. The following example is based on the output of Kaldi WSJ training run.\r\n\r\nGraph construction, the scripts directory contains \r\nThe Kaldi language directory, we re-use the existing Kaldi lexicon and LM.\r\n\r\n````bash\r\n    cd $OPENDCD/scripts\r\n    export KALDI_ROOT=/home/opendcd/tools/kaldi-trunk\r\n    ./makeclevel.sh \\\r\n    $KALDI_ROOT/egs/wsj/s5/data/lang_test_bg_5k \\\r\n    $KALDI_ROOT/egs/wsj/s5/exp/tri2a \\\r\n    $KALDI_ROOT/egs/wsj/s5/exp/ocd_tri2a \\\r\n    $KALDI_ROOT\r\n````\r\n\r\n\r\nSee egs directory contains example script for showing how to convert a Kaldi WSJ setup\r\n\r\nBrief Overview\r\n---------------\r\n\r\nThe first release includes the following features:\r\n\r\n  - Standalone lightweight decoder core\r\n  - Kaldi file format compatible or ptionally build against Kaldi\r\n  - Post-processing tools\r\n  - OpenFst and Kaldi Interop Tools\r\n\r\nDecoder:\r\n\r\n  - Customizable transition model for custom user and transition models\r\n  - Direct decoding on different weight semiring\r\n  - On-the-fly decoding using lookahead composition\r\n  - Lattice generation \r\n  - Switchable STL implementations. Use different implementations such EASTL or RDESTL, or mix optimized containers such as Google sparse hash.\r\n  - Powerful registration mechanism for adding user defined acoustic models and or lattice generation strategies\r\n\r\nCascde construction:\r\n\r\n  - Script to efficiently build and convert models from a Kaldi lang directory\r\n  \r\nResults post-processing:\r\n\r\n  - ``farfilter`` Apply the command to every in FST in the FAR archive\r\n  - ``latticetofar`` Convert Kaldi Table to OpenFst FAR archive\r\n  - ``fartolattice`` Convert an OpenFst FAR archive to Kaldi Table\r\n\r\nKaldi Interoperability:\r\n\r\n  - Write results in Kaldi *Lattice* table format\r\n  - [More information](https://github.com/opendcd/opendcd.github.io/wiki/Kaldi-Interoperability) on optionally building against Kaldi \r\n  - Convert Kaldi tree to optimized decoding structure\r\n\r\nMore Information\r\n  - A [getting start guide](https://github.com/opendcd/opendcd.github.io/wiki/EC2-Installation-Walkthrough) for running OpenDcd on Ec2 using the Librispeech models\r\n  - Ongoing introdutory slides can be found [here](https://dl.dropboxusercontent.com/u/321851/opendcd.pdf). These are updated infrequently. \r\n","google":"UA-53767021-1","note":"Don't delete this file! It's used internally to help with page regeneration."}